@model Hrms.HRMViewModel.CompanyInfoViewModel
@*@using Hrms.HRMViewModel.CompanyInfoViewModel*@

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutUcasportfolio.cshtml";//CountryList

    var CountryList = Model == null ? null : Model.CountryList;
    var MarketSectorList = Model == null ? null : Model.MarketSectorList;
    var MarketTypeList = Model == null ? null : Model.MarketInstrumentTypeList;
    var MarketGroupList = Model == null ? null : Model.MarketGroupList;
    var CompanyDepositoryList = Model == null ? null : Model.CompanyDepositoryList;
}

<style>
    .required::after {
        content: " *";
        color: red;
    }

    .bordercss {
        border: 3px double #CCCCCC;
        color: black;
    }

        .bordercss:focus {
            box-shadow: 0 0 5px rgba(81, 203, 238, 1);
            border: 2px solid rgba(81, 203, 238, 1);
        }

    .error {
        border: 2px solid red;
    }
</style>

<script type="text/javascript">

    //

    function checkEPS() {
        if (parseFloat($("#EPS").val().trim()) >= 1000) {
            $.alert.open("error", "EPS must be less than 1000.");
            $("#EPS").val("");
        } else {
            return true;
        }
    }

    function checkCompanyShortName() {
        if ($("#CompanyShortName").val().length <= 20) {
            return true
        }
        else {
            $.alert.open("error", "Company short name must be less than 20 character");
            $("#CompanyShortName").val("");
        }
    }

    function checkCompanyName() {
        if ($("#CompanyName").val().length <= 250) {
            return true
        }
        else {
            $.alert.open("error", "Company Name must be less than 250 character");
            $("#CompanyName").val("");
        }
    }


    function Validation() {
        if ($("#CompanyName").val().trim() != ""  && $("#CompanyShortName").val().trim() != "" )//&& $("#TradeIdDSE").val().trim() != ""
        {
            return true;

        }
        else {
            return false;
        }
    }

    //function validateEmail(sEmail) {
    //    var filter =  /^[\w\-\.\+]+\@@[a-zA-Z0-9\.\-]+\.[a-zA-z0-9]{2,4}$/;
    //    if (filter.test(sEmail)) {
    //        return true;
    //    }
    //    else {
    //        return false;

    //function checkNumeric(e) {
    //    if (e.which == 46 || e.which >= 48 && e.which <= 57) {
    //        return true;
    //    }
    //    else
    //        return false;
    //}


    $(document).ready(function () {

        $("#Status").val(1);

        $("#Email").blur(function () {
            if ($("#Email").val() != "") {
                var filter = /^[\w\-\.\+]+\@@[a-zA-Z0-9\.\-]+\.[a-zA-z0-9]{2,4}$/;
                if (filter.test($("#Email").val())) {
                    return true;
                }
                else {
                    $("#Email").val("");
                    $.alert.open("error", "Insert right email formate");
                    return false;
                }
            }
        });

        $("#ddlStatus").val($("#Status").val())

        $("#ddlStatus").change(function () {

            $("#Status").val($("#ddlStatus").val());
        });


        $('#btnSave').click(function (e) {
            e.preventDefault();

            if (Validation() == true) {
                if (!validator.checkAll($('form'))) {
                    return false;
                }
                else {
                    $('#AjaxLoader').show();
                    $.ajax({
                        type: "Post",
                        url: '@Url.Action("Create", "CompanyInfo")',
                        //contentType: "application/json; charset=utf-8",
                        data: $('#CompanyInfoForm').serialize(),
                        dataType: "json",
                        success: function (data) {
                            $('#AjaxLoader').hide();
                            $.alert.open(data.Result, data.Message, function () {
                                if (data.Result == "SUCCESS") {
                                    window.location = "@Url.Action("Index","CompanyInfo")";
                                }
                            });
                        },
                        error: function () {
                            $("#dialog-message").html('<p>Error, Fail to Save.</p>');
                            $("#dialog-message").dialog({
                                modal: true,
                                buttons: {
                                    Ok: function () {
                                        $(this).dialog("close");
                                    }
                                }
                            });
                        }
                    });

                    //$('#CompanyInfoForm').ajaxSubmit({
                    //    target: '#thumbnil',
                    //    data: {},
                    //    dataType: 'json',
                    //    resetForm: true,
                    //    success: function (data) {
                    //        //if (data.data.Id > 0) {
                    //        $('#AjaxLoader').hide();
                    //        //$('img').attr('src', 'src="~/Images/blank-headshot.jpg" alt="Image"'); // Clear the src
                    //        $.alert.open(data.Result, data.Message);
                    //        //}
                    //        //else {
                    //        //    $(".failed").show(800).fadeToggle(3000);
                    //        //}
                    //    },
                    //    error: function () {
                    //        $("#dialog-message").html('<p>Error, Fail to Save.</p>');
                    //        $("#dialog-message").dialog({
                    //            modal: true,
                    //            buttons: {
                    //                Ok: function () {
                    //                    $(this).dialog("close");
                    //                }
                    //            }
                    //        });
                    //    }
                    //});
                }
            }
            else {
                $.alert.open("error", "Insert required field");
            }

        });





        @*$("#MarketPriceDate").datepicker(
       {
           dateFormat: "dd/mm/yy",
           showAnim: "scale",
           changeMonth: true,
           changeYear: true,
           yearRange: "1920:@DateTime.Now.Year"
       });*@
        //$("#MarketPriceDate").on("change", function () {
        //    if ($("#MarketPriceDate").val().trim() == "")
        //        $("#hidMarketPriceDate").val("");
        //    else {

        //        var fromDate = $("#MarketPriceDate").val().trim();
        //        var arr = fromDate.split("/");
        //        if (parseInt(arr[0]) > 31 || parseInt(arr[1]) > 12) {
        //            $("#hidMarketPriceDate").val("");
        //        } else {
        //            $("#hidMarketPriceDate").val($.datepicker.formatDate("dd-M-yy", new Date(arr[2], parseInt(arr[1]) - 1, arr[0])));
        //        }
        //    }
        //});

    });

</script>


@Html.ActionLink("Back To List", "Index", null, new { @class = "btn btn-primary btn-sm pull-right" })

@using (Html.BeginForm("Create", "CompanyInfo", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal form-label-left", id = "CompanyInfoForm" }))
{
    @*@Html.AntiForgeryToken()*@


    <div class="page-title">
        <div class="title_left PageHeader" style="width:90%;">
            <h3 style="color: white;padding:2px">Securities Information Entry</h3>
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <br />

                    <div class="row form-group">
                        @Html.Label("Securities Name", htmlAttributes: new { @class = "control-label col-md-2 required" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control", @required = "required", @onkeyup = "checkCompanyName();", @autofocus = "autofocus" } })
                        </div>
                        @Html.Label("Short Name", htmlAttributes: new { @class = "control-label col-md-2 required" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.CompanyShortName, new { htmlAttributes = new { @class = "form-control", @onkeyup = "checkCompanyShortName();" } })
                        </div>

                    </div>
                    <div class="row form-group">
                        @Html.Label("Country", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.DropDownListFor(model => model.CountryId, CountryList, new { @ID = "ddlCountry", @class = "form-control bordercss" })
                        </div>
                        @Html.Label("Instrument Type", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.DropDownListFor(model => model.InstrumentTypeId, MarketTypeList, new { @ID = "ddlMarketType", @class = "form-control bordercss" })
                        </div>
                    </div>
                    <div class="row form-group">
                        @Html.Label("Sector", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.DropDownListFor(model => model.SectorId, MarketSectorList, new { @ID = "ddlSector", @class = "form-control bordercss" })
                        </div>
                        @Html.Label("Depository", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.DropDownListFor(model => model.CompanyDepositoryId, CompanyDepositoryList, new { @ID = "ddlCompanyDepository", @class = "form-control bordercss" })
                        </div>
                    </div>
                    <div class="row form-group">

                        @Html.Label("Group", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.DropDownListFor(model => model.GroupId, MarketGroupList, new { @ID = "ddlGroup", @class = "form-control bordercss" })
                        </div>
                        @Html.Label("Address", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="row form-group">

                        @Html.Label("Email", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.Label("Phone", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>

                    <div class="row form-group">

                        @Html.Label("Fax", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.Fax, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.Label("Web Address", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.WebAddress, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="row form-group">
                        @Html.Label("Trade Id DSE", htmlAttributes: new { @class = "control-label col-md-2 required" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.TradeIdDSE, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        </div>
                        @Html.Label("Trade Id CSE", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.TradeIdCSE, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="row form-group">
                        @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            <select class="form-control bordercss" id="ddlStatus">
                                <option value="1">Active</option>
                                <option value="0">Inactive</option>
                                <option value="2">Suspend</option>
                            </select>
                            @Html.HiddenFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.Label("EPS", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.EPS, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return checkNumeric(event);", @onkeyup = "checkEPS();" } })
                        </div>
                    </div>

                    <div class="row form-group">

                        @Html.Label("NAV", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.NAV, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return checkNumeric(event);" } })
                        </div>
                        @Html.Label("ISINNo", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.ISINNo, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>

                    <div class="row form-group">

                        @Html.Label("Authorize Capital", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.AuthorizeCapital, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return checkNumeric(event);" } })
                        </div>
                        @Html.Label("Paid Up Capital", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.PaidUpCapital, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return checkNumeric(event);" } })
                        </div>
                    </div>

                    <div class="row form-group">

                        @Html.Label("Market Price", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.MarketPrice, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return checkNumeric(event);" } })
                        </div>
                        @Html.Label("Market Price Date", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            <input type="datetime" class="form-control DateInput check-date" id="MarketPriceDate" data-hid="hidMarketPriceDate" name="txtMarketPriceDate" value="" />
                            <input type="hidden" id="hidMarketPriceDate" name="MarketPriceDate" value="" />
                        </div>
                    </div>

                    <div class="row form-group">

                        @Html.Label("Face Value", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.FaceValue, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return checkNumeric(event);" } })
                        </div>
                        @Html.Label("Market Lot", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.MarketLot, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return checkNumeric(event);" } })
                        </div>
                    </div>
                    <div class="row form-group">
                        @Html.Label("Premium", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4 col-sm-6 col-xs-12">
                            @Html.EditorFor(model => model.Premium, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return checkNumeric(event);" } })
                        </div>
                        <div class="col-md-2 col-sm-6 col-xs-12">
                        </div>
                        <div>
                            @Html.CheckBoxFor(model => model.IsShareCompany) <span>Is ShareCompany</span>
                            @*@Html.CheckBoxFor(model => model.IsForeign)  <span>Is Foreign</span>
                            @Html.CheckBoxFor(model => model.IsMarginLoan) <span>Margin Loan</span>*@
                           
                        </div>
                    </div>
                    <div class="row form-group">



                    </div>


                    <div class="ln_solid"></div>

                    <div class="form-group">
                        <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">
                            <button type="button" id="btnSave" class="btn btn-success">Save</button>
                        </div>
                    </div>
                    <div class="item form-group">
                        <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">
                            <div class="success" role="alert" style="display:none">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <p class="message-content">Saved Sucessfully</p>
                            </div>
                            <div class="failed" role="alert" style="display:none">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <p class="message-content">Fail to save</p>
                            </div>
                            <br />

                        </div>
                    </div>
                    @*</form>*@
                </div>
            </div>
        </div>
    </div>
}



